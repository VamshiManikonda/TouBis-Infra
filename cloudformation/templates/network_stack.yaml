Description: >
    This template deploys a VPC, with 2 public and 2 private subnets in 2 AZs of virgina region us-east-1

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        AllowedValues: 
        - Non-Prod
        - Prod-Main
        Default: 'Non-Prod'

    ProductName:
        Description: A Product name that will be prefixed to resource names
        Type: String
        Default: TouBisPOC

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 172.24.32.0/22

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet
        Type: String
        Default: 172.24.32.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet 
        Type: String
        Default: 172.24.33.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet 
        Type: String
        Default: 172.24.34.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet 
        Type: String
        Default: 172.24.35.0/24

    AvailabilityZone:
        Description: Please provide AZ value
        Type: String
        Default: us-east-1a

    AvailabilityZoneB:
        Description: Please provide AZ B value (used only for ALBs)
        Type: String
        Default: us-east-1b

Resources:
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName}
                - Key: Business / Service Owner
                  Value: TouBisTeam
                - Key: Purpose
                  Value: Network
                - Key: Environment
                  Value: !Sub ${EnvironmentName}
            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${ProductName}-${EnvironmentName}
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone
            CidrBlock: !Ref PublicSubnet1CIDR
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName}-PublicSubnetA

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZoneB
            CidrBlock: !Ref PublicSubnet2CIDR
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName}-PublicSubnetB

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZone
            CidrBlock: !Ref PrivateSubnet1CIDR
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName}-PrivateSubnetA

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AvailabilityZoneB
            CidrBlock: !Ref PrivateSubnet2CIDR
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName}-PrivateSubnetB

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1
            Tags:
                - Key: Name
                  Value: !Sub ${ProductName}-${EnvironmentName}

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProductName}-${EnvironmentName} Private Routes

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet2


    # Application Load Balancer
    LoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub ${ProductName}-${EnvironmentName}-LoadBalancer
            GroupDescription: Allow ports 80, 443 open to all
            VpcId: !Ref VPC
            #VpcId: !GetAtt VPC.id
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub ${ProductName}-${EnvironmentName}-LoadBalancer
                - Key: Business / Service Owner
                  Value: TouBisTeam
                - Key: Purpose
                  Value: Network
                - Key: ProductID
                  Value: !Ref ProductName
                - Key: Environment
                  Value: !Sub ${EnvironmentName}

Outputs: 
    VPCId: 
        Description: VPC id
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", VPCId ] ]
        Value: !Ref VPC
    VPCCidr: 
        Description: VPC cidr block
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", VPCCidr ] ]
        Value: !GetAtt VPC.CidrBlock
    PublicSubnet1:
        Description: list of the public subnets
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet1 ] ]
        Value: !Ref PublicSubnet1

    PrivateSubnet1:
        Description: list of the private subnets
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet1 ] ]
        Value: !Ref PrivateSubnet1

    PublicSubnet2:
        Description: list of the public subnets
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet2 ] ]
        Value: !Ref PublicSubnet2

    PrivateSubnet2:
        Description: list of the private subnets
        Export:
          Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet2 ] ]
        Value: !Ref PrivateSubnet2
